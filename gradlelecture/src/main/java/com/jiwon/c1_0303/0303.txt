- 과정
    모델 2 -> 스프링
    포트폴리오1 (스프링)
    포트폴리오2 (스프링 부트)
    JamStack
        화면에 html,css 로 처리 네트워크는 서버에서 데이터를 갖고 와서 처리
    React

- 중점
    step1 네트워킹, 입출력, DB
    step2 웹

- 포트 폴리오
    세로 문서 형태
    기획, 분석, 설계

- 프로젝트
    * 주제 : 맛집
    * 목표,비젼

    * 이해관계자
        시스템을 사용하는 사람(고객)
        고객의 관심사
            종업원,

    * 주제 범위
        특정 장소,단체 에서만 사용할지
        플랫폼으로 만들을지

    * 도메인
        - 분야별로 나눠놓은거

    * 범위를 작게 만들어서 크게 키운다. (재사용성)

    * 요구사항
        - 이해관계자에 따른 기능(CRUD)

    EX 맛집
        * 주제 : 맛집
        * 비전, 목표
            - 리뷰 갑질을 없애기
            - 데이터에 근거해서 맛집 찾기

        * 이해관계자
            생산자
                맛집 데이터
                    이름 / 메뉴 / 전화번호 / 배달여부 / +위도 / +경도 / 주문량 수
                기능
                    - 블로그에 있는 리뷰들을 크롤링 해서 갖고 오기

            소비자
                맛집 리뷰
                    가게 / 언제 / 리뷰
                기능
                    - 현재 위치에서 가장 가까운 떡볶이 집 => 위도,경도 필요
                    - 최근 일주일 동안 가장 많이간 가게(인기순위)


        * 기능 (CRUD)
            맛집 추가
            맛집 제거
            맛집 수정
            맛집 검색

        * 검증
            - 요구사항 분석서

        * 시스템 단계 , 분석 (비기능적 분석 : 기술, 아키텍처)
            - 웹으로 만들지
            - 앱으로 만들지
            - 콘솔 입력 받아서 만들지

        * 확장
          - 웹 -> 앱

        * 규모
            - 작게 시작해서 크게 키워라 !
                    1) 데이터를 먼저 잡아야한다.
                        Data
                            맛집data ,리뷰data , 생산자data, 소비자data

                        도메인 우선순위
                            맛집 data(1차) 리뷰 data(2차)

                        Data 묶기
                            도표
                            data의 고유 식별키 : 식별번호, 일련번호
                            맛집 Data
                                번호 / 이름 / 위도 / 경도

                    2) 프로그래밍
                        - 사용자 정의 타입 만들기 , 클래스
                        * 클래스
                            (1) 이름
                            (2) 인스턴스 변수
                            (3) 생성자
                            (4) toString
                            (5) equals
                            (6) getter
                            (7) setter

- 데이터 위주의 분석 방식
- 로직

